// @mixin backgroundGradient($from, $to, $direction: to bottom) {
// 	background: $to;  /* fallback for old browsers */
// 	background: -webkit-linear-gradient( $direction, $from, $to);  /* Chrome 10-25, Safari 5.1-6 */
// 	background: linear-gradient( $direction, $from, $to); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
// }

@mixin backgroundGradient($direction: to bottom, $gradients...) {
	background: nth($gradients, 1);  /* fallback for old browsers */
	background: -webkit-linear-gradient( $direction, $gradients);  /* Chrome 10-25, Safari 5.1-6 */
	background: linear-gradient( $direction, $gradients); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
} 

@mixin textGradient($from, $to, $direction: to bottom) {
	@include backgroundGradient($from, $to, $direction);
	-webkit-background-clip: text;
	-webkit-text-fill-color: transparent;
}

@mixin backgroundRadialGradient($direction: to bottom, $gradients...) {
	background: nth($gradients, 1);  /* fallback for old browsers */
	background: -webkit-radial-gradient( $direction, $gradients);  /* Chrome 10-25, Safari 5.1-6 */
	background: radial-gradient( $direction, $gradients); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
}

@mixin pseudoMarkup() {
	content: "";
	display: block;
	position: absolute;
	pointer-events: none;
}
@mixin imageBtn() {
	display: flex;
	font-size: 0px;
	background-repeat: no-repeat;
	background-position: center center;

	&:hover {
		filter: brightness(110%);
	}
}

@mixin itemAbsolute() {
	display: block;
	position: absolute;
}

@mixin textBorder($width, $color) {
	text-shadow: #{$width} 0 0 $color, 
				#{-1 * $width} 0 0 $color, 
				0 #{$width} 0 $color, 
				0 #{-1 * $width} 0 $color, 
				#{$width} #{$width} 0 $color, 
				#{-1 * $width} #{-1 * $width} 0 $color, 
				#{-1 * $width} #{$width} 0 $color, 
				#{$width} #{-1 * $width} 0 $color, 
				#{calc(1/2) * $width} #{ calc(1/2) * $width} 0 $color,
				#{calc(-1/2) * $width} #{calc(-1/2) * $width} 0 $color,
				#{calc(1/2) * $width} #{calc(-1/2) * $width} 0 $color,
				#{calc(-1/2) * $width} #{calc(1/2) * $width} 0 $color;
}

@mixin defaultHover() {
	&:not(.off):hover {
		cursor: pointer;
		pointer-events: all;
		filter: brightness(110%);
	}
}

@mixin fullSize($display: block){
	display: $display;
	position: absolute;
	width: 100%; height: 100%;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
}

@mixin superCenter() {
	display: flex;
	justify-content: center;
	align-items: center;
	align-content: center;
	text-align: center;
	vertical-align: middle;
}

@mixin image($type: '', $sprite: '') {
	@if $type == 'full' {
		display: block;
		width: 100%;
		height: 100%;
		object-fit: cover;
	} @else if $type == 'button' {
		display: block;
		font-size: 0px;
		background-repeat: no-repeat;
		background-position: center center;
	} @else if $type == 'button-text' {
		@include superCenter();
		background-repeat: no-repeat;
		background-position: center center;
	} @else if $type == 'sprite' {
		display: block;
		font-size: 0px;
		@include sprite($sprite);
	} @else if $type == 'sprite-text' {
		@include sprite($sprite);
		display: flex;
		@include superCenter();
	} 
}

@mixin dndGrid($neat-config) {
	@include grid-container;
	@include grid-collapse($neat-config); 
	width: initial;

	.col-xs, .col-sm, .col-md, .col-lg, .col-xl {
		&-0 {
			// display: none;
		}
	}

	@include grid-media($xs) {
		@for $i from 1 through 12 {
			& > .col-xs-#{$i} {
				@include grid-column($i, $neat-config);
			}
		}
	}

	@include grid-media($sm) {
		@for $i from 1 through 12 { 
			& > .col-sm-#{$i} {
				@include grid-column($i, $neat-config);
			}
		}
	}

	@include grid-media($md) {
		@for $i from 1 through 12 {
			& > .col-md-#{$i} {
				@include grid-column($i, $neat-config);
			}
		} 
	}

	@include grid-media($lg) {
		@for $i from 1 through 12 {
			& > .col-lg-#{$i} {
				@include grid-column($i, $neat-config);
			}
		}
	}

	@include grid-media($xl) {
		@for $i from 1 through 12 {
			& > .col-xl-#{$i} {
				@include grid-column($i, $neat-config);
			}
		}
	}

	// Portrait / Horizontal

	@for $i from 1 through 12 {
		& > .col-#{$i} {
			@include grid-column($i, $neat-config);
		} 
	}

	@include grid-media($portrait) {
		@for $i from 1 through 12 {
			& > .col-mobile-#{$i} {
				@include grid-column($i, $neat-config);
			}
		}
	}


	//------

	@include grid-media($xs) {
		@for $i from 1 through 12 {
			& > .col-xs-push-#{$i} {
				@include grid-push($i, $neat-config);
			}
		}
	}

	@include grid-media($sm) {
		@for $i from 1 through 12 { 
			& > .col-sm-push-#{$i} {
				@include grid-push($i, $neat-config);
			}
		}
	}

	@include grid-media($md) {
		@for $i from 1 through 12 {
			& > .col-md-push-#{$i} {
				@include grid-push($i, $neat-config);
			}
		}
	}

	@include grid-media($lg) {
		@for $i from 1 through 12 {
			.col-lg-push-#{$i} {
				@include grid-push($i, $neat-config);
			}
		}
	}

	@include grid-media($xl) {
		@for $i from 1 through 12 {
			.col-xl-push-#{$i} {
				@include grid-push($i, $neat-config);
			}
		}
	}
}

@mixin dndFlexGrid($neat-config) {
    // position: relative;
  display: flex;
  flex-wrap: wrap;
  width: 100%;


	$maxCol: 12;
	@for $i from 1 through $maxCol {
		& > .col-#{$i} {
			padding: 0 10px;
			flex-basis: (calc(100 / ($maxCol / $i) )) * 1%;
			max-width:  (calc(100 / ($maxCol / $i) ) ) * 1%;
		}
		& > .col-offset-#{$i} {
			padding: 0 10px;
        	margin-left: (calc(100 / ($maxCol / $i) ) ) * 1%;
			max-width:  (calc(100 / ($maxCol / $i) ) ) * 1%;
		}
	}

	@include grid-media($portrait) {
		@for $i from 1 through $maxCol {
			& > .col-mobile-#{$i} {
				padding: 0 10px;
				flex-basis: (calc(100 / ($maxCol / $i) ) ) * 1%;
				max-width:  (calc(100 / ($maxCol / $i) ) ) * 1%;
			}
			& > .col-mobile-offset-#{$i} {
				padding: 0 10px;
				margin-left: (calc(100 / ($maxCol / $i) ) ) * 1%;
				max-width:  (calc(100 / ($maxCol / $i) ) ) * 1%;
			}
		}
	}

}


@mixin scrollBar($bgColor, $thumbColor) {
	
	&::-webkit-scrollbar {
		margin-right: 6px;
		width: 6px;
		transition: width .2s;

	}

	&:hover {
		&::-webkit-scrollbar {
			width: 6px;
		}
	}
	
	/* Track */
	&::-webkit-scrollbar-track {
		background: rgba($bgColor, .5); 
	}
	
	/* Handle */
	&::-webkit-scrollbar-thumb {
		background: rgba($thumbColor, 1); 
	}
	
	/* Handle on hover */
	&::-webkit-scrollbar-thumb:hover {
		background: rgba($thumbColor, 1); 
	}
}
